import { computed } from 'vue'
import { logger } from '../utils/logger'
import type { SelectedFilters } from '../types/search'
import { useGlobalFilters } from './useGlobalFilters'

export const useSearchFilters = () => {
  const { selectedFilters, resetFilters: globalResetFilters } = useGlobalFilters()

  // Helper function to get hotels for search
  const getSelectedHotelsForSearch = (searchData: { hotels: { value: Array<{ id: number }> } }) => {
    logger.debug(`üè® getSelectedHotelsForSearch called. Available hotels: ${searchData.hotels.value.length}`)
    logger.debug(`üè® Selected hotel filters: ${selectedFilters.value.hotels.length}`)
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç–µ–ª–∏ –≤—Ä—É—á–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (selectedFilters.value.hotels.length > 0) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω ID=1 (–≤—Å–µ –æ—Ç–µ–ª–∏), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏
      if (selectedFilters.value.hotels.includes(1)) {
        return searchData.hotels.value.map((hotel) => Number(hotel.id))
      }
      // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è ID=1)
      return selectedFilters.value.hotels
        .filter(id => id !== 1)
        .map(id => Number(id))
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏
    const allHotels = searchData.hotels.value.map((hotel) => Number(hotel.id))
    logger.debug(`üè® Returning all hotels for search: ${allHotels.length} hotels`)
    return allHotels
  }

  // –°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤
  const resetFilters = () => {
    globalResetFilters()
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è "–õ—é–±–æ–π" (ID=1)
  const toggleAllHotels = () => {
    const isAnySelected = selectedFilters.value.hotels.includes(1)
    
    if (isAnySelected) {
      // –ï—Å–ª–∏ "–õ—é–±–æ–π" –≤—ã–±—Ä–∞–Ω, —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
      selectedFilters.value.hotels = []
    } else {
      // –ï—Å–ª–∏ "–õ—é–±–æ–π" –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º "–õ—é–±–æ–π" –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      selectedFilters.value.hotels = [1]
    }
  }

  const toggleAllCategories = () => {
    const isAnySelected = selectedFilters.value.categories.includes(1)
    
    if (isAnySelected) {
      // –ï—Å–ª–∏ "–õ—é–±–æ–π" –≤—ã–±—Ä–∞–Ω, —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
      selectedFilters.value.categories = []
    } else {
      // –ï—Å–ª–∏ "–õ—é–±–æ–π" –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º "–õ—é–±–æ–π" –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      selectedFilters.value.categories = [1]
    }
  }

  const toggleAllRegions = () => {
    const isAnySelected = selectedFilters.value.regions.includes(1)
    
    if (isAnySelected) {
      // –ï—Å–ª–∏ "–õ—é–±–æ–π" –≤—ã–±—Ä–∞–Ω, —Å–Ω–∏–º–∞–µ–º –≤—ã–±–æ—Ä
      selectedFilters.value.regions = []
    } else {
      // –ï—Å–ª–∏ "–õ—é–±–æ–π" –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º "–õ—é–±–æ–π" –∏ –æ—á–∏—â–∞–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
      selectedFilters.value.regions = [1]
    }
  }

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const toggleRegion = (regionId: number) => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1), —Å–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (selectedFilters.value.regions.includes(1)) {
      selectedFilters.value.regions = []
    }
    
    const index = selectedFilters.value.regions.indexOf(regionId)
    if (index > -1) {
      selectedFilters.value.regions.splice(index, 1)
    } else {
      selectedFilters.value.regions.push(regionId)
    }
  }

  const toggleCategory = (categoryId: number) => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1), —Å–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (selectedFilters.value.categories.includes(1)) {
      selectedFilters.value.categories = []
    }
    
    const index = selectedFilters.value.categories.indexOf(categoryId)
    if (index > -1) {
      selectedFilters.value.categories.splice(index, 1)
    } else {
      selectedFilters.value.categories.push(categoryId)
    }
  }

  const toggleHotel = (hotelId: number) => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1), —Å–Ω–∞—á–∞–ª–∞ —Å–Ω–∏–º–∞–µ–º –µ–≥–æ
    if (selectedFilters.value.hotels.includes(1)) {
      selectedFilters.value.hotels = []
    }
    
    const index = selectedFilters.value.hotels.indexOf(hotelId)
    if (index > -1) {
      selectedFilters.value.hotels.splice(index, 1)
    } else {
      selectedFilters.value.hotels.push(hotelId)
    }
  }

  const toggleMeal = (mealId: number) => {
    const index = selectedFilters.value.meals.indexOf(mealId)
    if (index > -1) {
      selectedFilters.value.meals.splice(index, 1)
    } else {
      selectedFilters.value.meals.push(mealId)
    }
  }

  const toggleOption = (optionId: number) => {
    const index = selectedFilters.value.options.indexOf(optionId)
    if (index > -1) {
      selectedFilters.value.options.splice(index, 1)
    } else {
      selectedFilters.value.options.push(optionId)
    }
  }

  const toggleAllMeals = (meals: Array<{ id: number }>) => {
    const allMealIds = meals.map(meal => meal.id)
    const isAllSelected = allMealIds.every(id => selectedFilters.value.meals.includes(id))
    
    if (isAllSelected) {
      selectedFilters.value.meals = []
    } else {
      selectedFilters.value.meals = [...allMealIds]
    }
  }

  const toggleAllOptions = (options: Array<{ id: number }>) => {
    const allOptionIds = options.map(option => option.id)
    const isAllSelected = allOptionIds.every(id => selectedFilters.value.options.includes(id))
    
    if (isAllSelected) {
      selectedFilters.value.options = []
    } else {
      selectedFilters.value.options = [...allOptionIds]
    }
  }

  // Computed —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–õ—é–±–æ–π" –≤—ã–±—Ä–∞–Ω
  const allRegionsSelected = computed(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1)
    return selectedFilters.value.regions.includes(1)
  })

  const allCategoriesSelected = computed(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1)
    return selectedFilters.value.categories.includes(1)
  })

  const allHotelsSelected = computed(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1)
    return selectedFilters.value.hotels.includes(1)
  })

  const allMealsSelected = computed(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1)
    return selectedFilters.value.meals.includes(1)
  })

  const allOptionsSelected = computed(() => {
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω "–õ—é–±–æ–π" (ID=1)
    return selectedFilters.value.options.includes(1)
  })

  return {
    selectedFilters,
    getSelectedHotelsForSearch,
    resetFilters,
    toggleAllHotels,
    toggleAllCategories,
    toggleAllRegions,
    toggleRegion,
    toggleCategory,
    toggleHotel,
    toggleMeal,
    toggleOption,
    toggleAllMeals,
    toggleAllOptions,
    allRegionsSelected,
    allCategoriesSelected,
    allHotelsSelected,
    allMealsSelected,
    allOptionsSelected
  }
}