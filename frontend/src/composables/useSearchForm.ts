import { ref, computed, watch, nextTick } from 'vue'
import { useSearchData } from './useSearchData'
import { useCalendarHints } from './useCalendarHints'
import { useNotifications } from './useNotifications'
import { logger } from '../utils/logger'
import { getAirportIdByPackageName } from '../constants/airports'
import type { SearchForm, SelectedFilters, GroupedSearchResult } from '../types/search'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –æ—Ç OBS API
interface ObsSearchResult {
  unique_key: string
  rid: string
  hotel_results_counter: number
  package_template: number
  operator: number
  additional_services: unknown[]
  dates: {
    check_in: string
    check_out: string
  }
  nights: {
    total: number
    on_the_way: number
  }
  accommodation: {
    hotel: {
      id: number
      name: string
      is_exclusive: boolean
      category: string
      city: string
      in_stop: boolean
    }
    room: {
      id: number
      name: string
    }
    placement: {
      id: number
      name: string
    }
    meal: {
      id: number
      name: string
      full_name: string
    }
  }
  tickets: {
    from: {
      id: number
      name: string
      airline: {
        iata_code: string
        color: string
        name: string
        airline: string
      }
      departure: {
        date: string
        time: string
      }
      arrival: {
        date: string
        time: string
      }
      airports: {
        from: {
          name: string
          prefix: string
        }
        to: {
          name: string
          prefix: string
        }
      }
      tickets: number | null
    }
    to: {
      id: number
      name: string
      airline: {
        iata_code: string
        color: string
        name: string
        airline: string
      }
      departure: {
        date: string
        time: string
      }
      arrival: {
        date: string
        time: string
      }
      airports: {
        from: {
          name: string
          prefix: string
        }
        to: {
          name: string
          prefix: string
        }
      }
      tickets: number | null
    }
    on_request: 'y' | 'n'
    has_tickets: boolean
  }
  price: {
    amount: number
    netto: number
    commission: number
    type: string
    currency: string
    currency_id: number
  }
  transfers: {
    to: number
    from: number
  }
  never_land_entrance: unknown[]
  gala_dinner: unknown[]
  aquapark_services: unknown[]
  tourists: {
    adults: number
    children_ages: number[]
  }
}

export const useSearchForm = () => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ composable
  const searchData = useSearchData()
  const calendarHints = useCalendarHints()
  const { showError } = useNotifications()

  // Reactive data
  const searchForm = ref<SearchForm>({
    departureCity: null,
    destination: null,
    package: null,
    arrivalCity: null,
    date: null,
    checkInDate: null,
    checkOutDate: null,
    nights: null,
    nights2: null,
    adults: null,
    children: null,
    childrenAges: [],
    priceFrom: null,
    priceTo: null,
    selectedHotels: [],
  })

  const selectedFilters = ref<SelectedFilters>({
    regions: [],
    categories: [],
    hotels: [],
    meals: [],
    options: [],
  })

  const isLoading = ref(false)
  const searchResults = ref<Record<string, ObsSearchResult> | null>(null)
  const totalResults = ref(0)
  
  // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
  const currentPage = ref(1)
  const itemsPerPage = 20 // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 20 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const serverPageSize = 1000 // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É (per_page > 500)
  const lastSearchParams = ref<Record<string, unknown> | null>(null)
  const allLoadedResults = ref<Record<string, ObsSearchResult> | null>(null) // –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const loadedPages = ref<Set<number>>(new Set()) // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–µ—Ä–≤–µ—Ä–∞
  const isLoadingMore = ref(false) // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  
  // Client-side pagination based on loaded results
  const totalPages = computed(() => {
    if (!allLoadedResults.value || typeof allLoadedResults.value !== 'object') return 0
    
    try {
      const allResults = Object.values(allLoadedResults.value)
      if (allResults.length === 0) return 0
      
      let groupedResults = groupResultsByHotel(allResults)
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (selectedFilters.value.regions.length > 0 || selectedFilters.value.categories.length > 0) {
        groupedResults = filterResultsByRegionsAndCategories(groupedResults)
      }
      
      const pages = Math.ceil(groupedResults.length / itemsPerPage)
      logger.debug(`totalPages computed: groupedResults.length=${groupedResults.length}, itemsPerPage=${itemsPerPage}, pages=${pages}`)
      return pages
    } catch (error) {
      logger.error('Error in totalPages computed:', error)
      return 0
    }
  })
  
  // Hybrid pagination: server loads 100, frontend shows 20
  const paginatedResults = computed(() => {
    logger.info(`üîÑ paginatedResults computed called: allLoadedResults = ${allLoadedResults.value ? 'EXISTS' : 'NULL'}`)
    
    if (!allLoadedResults.value || typeof allLoadedResults.value !== 'object') {
      logger.info('‚ùå paginatedResults: no allLoadedResults')
      return []
    }
    
    try {
      // Get all loaded results as array
      const allResults = Object.values(allLoadedResults.value)
      logger.info(`üìä paginatedResults: allResults.length = ${allResults.length}, currentPage = ${currentPage.value}`)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (allResults.length === 0) {
        logger.debug('paginatedResults: no results to process')
        return []
      }
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –æ—Ç–µ–ª—è–º
      let groupedResults = groupResultsByHotel(allResults)
      logger.debug(`paginatedResults: groupedResults.length = ${groupedResults.length}`)
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (selectedFilters.value.regions.length > 0 || selectedFilters.value.categories.length > 0) {
        groupedResults = filterResultsByRegionsAndCategories(groupedResults)
        logger.debug(`paginatedResults: after filtering groupedResults.length = ${groupedResults.length}`)
      }
      
      // Calculate pagination for current page (20 items per page)
      const startIndex = (currentPage.value - 1) * itemsPerPage
      const endIndex = startIndex + itemsPerPage
      
      const paginated = groupedResults.slice(startIndex, endIndex)
      logger.info(`üìÑ paginatedResults: startIndex = ${startIndex}, endIndex = ${endIndex}, paginated.length = ${paginated.length}`)
      logger.info(`üìÑ Final paginated results:`, paginated.length > 0 ? 'HAS RESULTS' : 'NO RESULTS')
      
      return paginated
    } catch (error) {
      logger.error('Error in paginatedResults computed:', error)
      return []
    }
  })

  // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É
  const needsMoreData = computed(() => {
    // –í—Å–µ–≥–¥–∞ false - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É
    return false
  })

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–µ–ª–∫–∏
  const activeSelector = computed((): string | null => {
    if (!searchForm.value.departureCity) return 'departureCity'
    if (!searchForm.value.destination) return 'destination'
    if (!searchForm.value.package) return 'package'
    if (!searchForm.value.arrivalCity) return 'arrivalCity'
    if (!searchForm.value.checkInDate) return 'checkInDate'
    if (!searchForm.value.checkOutDate) return 'checkOutDate'
    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è –≤—Å–µ –ø–æ–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–µ–ª–æ—á–∫—É –Ω–∞ –ø–æ–ª–µ "–î–µ—Ç–µ–π" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞
    if (searchForm.value.checkInDate && searchForm.value.children === null) return 'children'
    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–µ–π (–≤–∫–ª—é—á–∞—è 0 - "–ë–µ–∑ –¥–µ—Ç–µ–π") –≤—Å–µ –ø–æ–ª—è –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è, —Å—Ç—Ä–µ–ª–æ—á–∫–∞ –∏—Å—á–µ–∑–∞–µ—Ç
    return null // –í—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
  })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞
  watch(() => searchForm.value.checkInDate, (newDate) => {
    if (newDate) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–æ—á–∏ –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
      searchForm.value.nights = null
      searchForm.value.nights2 = null
      
      // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—Ä–æ—Å–ª—ã—Ö
      if (!searchForm.value.adults) {
        searchForm.value.adults = 2
      }
      // –ü–æ–ª–µ children –æ—Å—Ç–∞–µ—Ç—Å—è null –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞
      if (!searchForm.value.checkOutDate || searchForm.value.checkOutDate < newDate) {
        searchForm.value.checkOutDate = newDate
      }
    }
  })

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ—á–µ–π
  const filteredNights2Options = computed(() => {
    if (!searchForm.value.nights) {
      return []
    }

    return searchData.nightsOptions.value.filter(
      (option: { value: number; label: string }) => option.value >= (searchForm.value.nights || 0)
    )
  })
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏ –Ω–æ—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ calendar hints
  const dynamicNightsOptions = computed(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ—á–∏ –∏–∑ calendar hints, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (calendarHints.availableNights.value.length > 0) {
      return calendarHints.availableNightsOptions.value
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏
    return searchData.nightsOptions.value
  })

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedResults = computed(() => {
    if (!searchResults.value || typeof searchResults.value !== 'object') {
      return []
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const formatted = paginatedResults.value.map((result: GroupedSearchResult) => ({
      unique_key: `${result.hotel.id}-${result.room.id}-${result.meal.id}`,
      rid: `${result.hotel.id}-${result.room.id}-${result.meal.id}`,
      accommodation: {
        hotel: {
          name: result.hotel?.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è',
          category: result.hotel?.category || '',
          city: result.hotel?.city || ''
        },
        room: {
          name: result.room?.name || ''
        },
        meal: {
          full_name: result.meal?.full_name || result.meal?.name || ''
        }
      },
      dates: {
        check_in: result.dates?.check_in || '',
        check_out: result.dates?.check_out || ''
      },
      nights: {
        total: result.nights?.total || 0
      },
      price: {
        amount: result.minPrice || 0,
        currency: result.currency || 'EUR',
        type: result.price?.type || ''
      }
    }))
    
    return formatted
  })

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π watcher –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞–Ω—ã
  watch(
    () => [searchForm.value.departureCity, searchForm.value.destination],
    async ([newCity, newCountry], [oldCity, oldCountry]) => {
      try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (newCity && newCity.id && newCity.id !== oldCity?.id) {
          searchForm.value.destination = null
          searchForm.value.package = null
          await searchData.loadCountries(newCity.id)
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        if (newCountry && newCountry.id && newCountry.id !== oldCountry?.id && searchForm.value.departureCity?.id) {
          searchForm.value.package = null
          searchForm.value.arrivalCity = null
          await searchData.loadPackageTemplates(newCountry.id, searchForm.value.departureCity.id)
        }
      } catch (err) {
        logger.error('Search form cascade watch error:', err)
      }
    },
    { deep: true }
  )

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–∞–∫–µ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  watch(() => searchForm.value.package, async (newPackage) => {
    try {
      if (newPackage && newPackage.id) {
        // –ï—Å–ª–∏ —É –ø–∞–∫–µ—Ç–∞ –µ—Å—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞
        if (newPackage.airports && newPackage.airports.length > 0) {
          const airport = newPackage.airports[0]
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞
          const arrivalCity = {
            id: airport.id,
            name: airport.label || airport.name || `Airport ${airport.id}`
          }
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          searchForm.value.arrivalCity = { ...arrivalCity }
          
          // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º Multiselect
          await nextTick()
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, 
          // –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞–∫–µ—Ç–∞
          const packageName = newPackage.label || newPackage.name || ''
          const airportId = getAirportIdByPackageName(packageName)
          
          if (airportId) {
            const arrivalCity = {
              id: airportId,
              name: packageName.toUpperCase()
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            searchForm.value.arrivalCity = { ...arrivalCity }
            
            // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
            await nextTick()
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π
        await Promise.all([
          searchData.loadHotelCategories(newPackage.id),
          searchData.loadLocations(newPackage.id),
          searchData.loadHotels(newPackage.id),
          searchData.loadMeals(newPackage.id)
        ])
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º calendar hints –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ –Ω–æ—á–µ–π
        if (searchForm.value.departureCity?.id && searchForm.value.arrivalCity?.id) {
          try {
            await calendarHints.loadCalendarHints({
              city_from: searchForm.value.departureCity.id,
              city_to: searchForm.value.arrivalCity.id.toString()
            })
            logger.info('Calendar hints loaded successfully')
          } catch (err) {
            logger.warn('Failed to load calendar hints:', err)
          }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–µ–ª–∏
        if (searchData.regions.value.length > 0) {
          selectedFilters.value.regions = [1, ...searchData.regions.value.map(r => r.id)]
        }
        
        if (searchData.categories.value.length > 0) {
          selectedFilters.value.categories = [1, ...searchData.categories.value.map(c => c.id)]
        }
        
        if (searchData.hotels.value.length > 0) {
          selectedFilters.value.hotels = [1, ...searchData.hotels.value.map(h => h.id)]
        }
        
        if (searchData.meals.value.length > 0) {
          selectedFilters.value.meals = [1, ...searchData.meals.value.map(m => m.id)]
        }
      } else {
        // –û—á–∏—â–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–∫–µ—Ç–∞
        searchForm.value.arrivalCity = null
      }
    } catch (err) {
      logger.error('Package watch error:', err)
    }
  })

  // Watcher –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
  watch(() => searchForm.value.children, (newChildren, oldChildren) => {
    if (newChildren !== oldChildren) {
      if (newChildren === null || newChildren === 0) {
        searchForm.value.childrenAges = []
      } else {
        const currentAges = [...searchForm.value.childrenAges]
        searchForm.value.childrenAges = Array(newChildren)
          .fill(0)
          .map((_, index) => {
            return index < currentAges.length ? currentAges[index] : 0
          })
      }
    }
  }, { immediate: true })

  // Watcher –¥–ª—è nights
  watch(() => searchForm.value.nights, (newNights, oldNights) => {
    if (newNights !== oldNights && newNights && (!searchForm.value.nights2 || searchForm.value.nights2 < newNights)) {
      searchForm.value.nights2 = newNights
    }
  }, { immediate: true })


  // Helper function to get hotels for search
  const getSelectedHotelsForSearch = () => {
    logger.debug(`üè® getSelectedHotelsForSearch called. Available hotels: ${searchData.hotels.value.length}`)
    logger.debug(`üè® Selected hotel filters: ${selectedFilters.value.hotels.length}`)
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ—Ç–µ–ª–∏ –≤—Ä—É—á–Ω—É—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (selectedFilters.value.hotels.length > 0) {
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω ID=1 (–≤—Å–µ –æ—Ç–µ–ª–∏), –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏
      if (selectedFilters.value.hotels.includes(1)) {
        return searchData.hotels.value.map(hotel => Number(hotel.id))
      }
      // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ (–∏—Å–∫–ª—é—á–∞—è ID=1)
      return selectedFilters.value.hotels
        .filter(id => id !== 1)
        .map(id => Number(id))
    }
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏
    if (selectedFilters.value.regions.length > 0 || selectedFilters.value.categories.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ –∏–∑ searchData
      const allHotels = searchData.hotels.value
      let filteredHotels = allHotels
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
      if (selectedFilters.value.regions.length > 0 && !selectedFilters.value.regions.includes(1)) {
        // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∫ –≥–æ—Ä–æ–¥–∞–º
        const regionCitiesMap = new Map<number, number[]>()
        searchData.regions.value.forEach(region => {
          if (region.cities && Array.isArray(region.cities)) {
            const cityIds = region.cities.map(city => city.id)
            regionCitiesMap.set(region.id, cityIds)
          }
        })
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
        const selectedCities = new Set<number>()
        selectedFilters.value.regions.forEach(regionId => {
          const cities = regionCitiesMap.get(regionId)
          if (cities) {
            cities.forEach(cityId => selectedCities.add(cityId))
          }
        })
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç–µ–ª–∏ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        filteredHotels = filteredHotels.filter(hotel => {
          return hotel.city_id && selectedCities.has(hotel.city_id)
        })
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
      if (selectedFilters.value.categories.length > 0 && !selectedFilters.value.categories.includes(1)) {
        filteredHotels = filteredHotels.filter(hotel => {
          return hotel.category_id && selectedFilters.value.categories.includes(hotel.category_id)
        })
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–µ–ª–µ–π
      return filteredHotels.map(hotel => Number(hotel.id))
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ—Ç–µ–ª–∏
    const allHotels = searchData.hotels.value.map(hotel => Number(hotel.id))
    logger.debug(`üè® Returning all hotels for search: ${allHotels.length} hotels`)
    return allHotels
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –æ—Ç–µ–ª—è–º
  const groupResultsByHotel = (results: ObsSearchResult[]): GroupedSearchResult[] => {
    if (!results || results.length === 0) {
      return []
    }
    
    const groupedMap = new Map<string, GroupedSearchResult>()
    
    results.forEach(result => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
      if (!result.accommodation?.hotel?.id || !result.accommodation?.room?.id || !result.accommodation?.meal?.id) {
        logger.warn('Skipping result with missing accommodation data:', result)
        return
      }
      
      const hotelKey = `${result.accommodation.hotel.id}-${result.accommodation.room.id}-${result.accommodation.meal.id}`
      
      if (groupedMap.has(hotelKey)) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –ø–µ—Ä–µ–ª–µ—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ—Ç–µ–ª—é
        const existing = groupedMap.get(hotelKey)!
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –∫ –≤–∞—Ä–∏–∞–Ω—Ç—É –ø–µ—Ä–µ–ª–µ—Ç–∞
        const flightOptionWithPrice = {
          ...result.tickets,
          price: result.price
        }
        existing.flightOptions.push(flightOptionWithPrice)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—ã
        const currentPrice = result.price?.amount || 0
        if (currentPrice < existing.minPrice) {
          existing.minPrice = currentPrice
        }
        if (currentPrice > existing.maxPrice) {
          existing.maxPrice = currentPrice
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const grouped: GroupedSearchResult = {
          hotel: result.accommodation.hotel,
          room: result.accommodation.room,
          meal: result.accommodation.meal,
          dates: result.dates,
          nights: result.nights,
          price: result.price,
          transfers: result.transfers,
          never_land_entrance: result.never_land_entrance,
          gala_dinner: result.gala_dinner,
          aquapark_services: result.aquapark_services,
          tourists: result.tourists,
          flightOptions: [{
            ...result.tickets,
            price: result.price
          }],
          minPrice: result.price?.amount || 0,
          maxPrice: result.price?.amount || 0,
          currency: result.price?.currency || 'EUR'
        }
        groupedMap.set(hotelKey, grouped)
      }
    })
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
    return Array.from(groupedMap.values()).sort((a, b) => a.minPrice - b.minPrice)
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const filterResultsByRegionsAndCategories = (results: GroupedSearchResult[]): GroupedSearchResult[] => {
    let filteredResults = results
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    if (selectedFilters.value.regions.length > 0 && !selectedFilters.value.regions.includes(1)) {
      // –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ —Ä–µ–≥–∏–æ–Ω–æ–≤ –∫ –≥–æ—Ä–æ–¥–∞–º
      const regionCitiesMap = new Map<number, number[]>()
      searchData.regions.value.forEach(region => {
        if (region.cities && Array.isArray(region.cities)) {
          const cityIds = region.cities.map(city => city.id)
          regionCitiesMap.set(region.id, cityIds)
        }
      })
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
      const selectedCities = new Set<number>()
      selectedFilters.value.regions.forEach(regionId => {
        const cities = regionCitiesMap.get(regionId)
        if (cities) {
          cities.forEach(cityId => selectedCities.add(cityId))
        }
      })
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –≥–æ—Ä–æ–¥–∞–º –æ—Ç–µ–ª–µ–π
      filteredResults = filteredResults.filter(result => {
        // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö searchData –ø–æ ID
        const hotel = searchData.hotels.value.find(h => h.id === result.hotel.id)
        if (hotel && hotel.city_id) {
          return selectedCities.has(hotel.city_id)
        }
        return false
      })
    }
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if (selectedFilters.value.categories.length > 0 && !selectedFilters.value.categories.includes(1)) {
      filteredResults = filteredResults.filter(result => {
        // –ù–∞—Ö–æ–¥–∏–º –æ—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö searchData –ø–æ ID
        const hotel = searchData.hotels.value.find(h => h.id === result.hotel.id)
        if (hotel && hotel.category_id) {
          return selectedFilters.value.categories.includes(hotel.category_id)
        }
        return false
      })
    }
    
    return filteredResults
  }

  // Methods
  const handleSearch = () => {
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞—Ç
    const { isDateAvailable, availableDates } = useCalendarHints()
    
    logger.info('üîç Starting search with form data:', {
      departureCity: searchForm.value.departureCity?.id,
      destination: searchForm.value.destination?.id,
      package: searchForm.value.package?.id,
      checkInDate: searchForm.value.checkInDate,
      checkOutDate: searchForm.value.checkOutDate,
      nights: searchForm.value.nights,
      adults: searchForm.value.adults,
      children: searchForm.value.children,
      availableDatesCount: availableDates.value.length
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ –≤ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
    searchForm.value.selectedHotels = getSelectedHotelsForSearch()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!searchForm.value.departureCity?.id) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
      return
    }
    if (!searchForm.value.destination?.id) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è')
      return
    }
    if (!searchForm.value.package?.id) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç —Ç—É—Ä–∞')
      return
    }
    if (!searchForm.value.arrivalCity?.id) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞')
      return
    }
    if (!searchForm.value.checkInDate) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞')
      return
    }
    if (!searchForm.value.checkOutDate) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞')
      return
    }
    if (!searchForm.value.nights) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π')
      return
    }
    if (!searchForm.value.nights2) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π')
      return
    }
    if (searchForm.value.children === null) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–µ–π (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å "–ë–µ–∑ –¥–µ—Ç–µ–π")')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω—ã –æ—Ç–µ–ª–∏ –∏–ª–∏ –æ–ø—Ü–∏—è "–õ—é–±–æ–π"
    if (selectedFilters.value.hotels.length === 0) {
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–µ–ª–∏ –∏–ª–∏ –æ–ø—Ü–∏—é "–õ—é–±–æ–π" –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ö')
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    
    logger.info('üîç Checking date availability:', {
      checkInDate: searchForm.value.checkInDate,
      checkOutDate: searchForm.value.checkOutDate,
      checkInAvailable: searchForm.value.checkInDate ? isDateAvailable(searchForm.value.checkInDate) : 'no date',
      checkOutAvailable: searchForm.value.checkOutDate ? isDateAvailable(searchForm.value.checkOutDate) : 'no date',
      availableDatesCount: availableDates.value.length
    })
    
    if (!searchForm.value.checkInDate) {
      logger.warn('‚ùå No check-in date selected')
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞')
      return
    }
    if (!searchForm.value.checkOutDate) {
      logger.warn('‚ùå No check-out date selected')
      showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞')
      return
    }
    
    if (!isDateAvailable(searchForm.value.checkInDate)) {
      logger.warn('‚ùå Check-in date not available:', searchForm.value.checkInDate)
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
      if (availableDates.value.length > 0) {
        const firstAvailableDate = availableDates.value[0]
        logger.info('üîÑ Auto-selecting first available date:', firstAvailableDate)
        
        searchForm.value.checkInDate = firstAvailableDate
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞
        const nights = searchForm.value.nights || 7
        const checkOutDate = new Date(firstAvailableDate)
        checkOutDate.setDate(checkOutDate.getDate() + nights)
        searchForm.value.checkOutDate = checkOutDate
        
        logger.info('‚úÖ Auto-selected dates:', {
          checkIn: firstAvailableDate,
          checkOut: checkOutDate
        })
      } else {
        logger.warn('‚ùå No available dates found in calendar hints')
        showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç.')
        return
      }
    }
    if (!isDateAvailable(searchForm.value.checkOutDate)) {
      logger.warn('‚ùå Check-out date not available:', searchForm.value.checkOutDate)
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞
      if (searchForm.value.checkInDate) {
        const nights = searchForm.value.nights || 7
        const checkOutDate = new Date(searchForm.value.checkInDate)
        checkOutDate.setDate(checkOutDate.getDate() + nights)
        searchForm.value.checkOutDate = checkOutDate
        
        logger.info('üîÑ Auto-calculated check-out date:', checkOutDate)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞
        if (!isDateAvailable(checkOutDate)) {
          logger.warn('‚ùå Auto-calculated check-out date also not available:', checkOutDate)
          showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ—á–µ–π')
          return
        }
      } else {
        showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', '–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
        return
      }
    }
    
    logger.info('‚úÖ Date validation passed, proceeding with search...')

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY –¥–ª—è API (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
    const formatDate = (date: Date) => {
      const day = date.getDate().toString().padStart(2, '0')
      const month = (date.getMonth() + 1).toString().padStart(2, '0')
      const year = date.getFullYear()
      return `${day}.${month}.${year}`
    }
    
    logger.info('üìÖ Formatted dates for API:', {
      checkIn: formatDate(searchForm.value.checkInDate),
      checkOut: formatDate(searchForm.value.checkOutDate)
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
    const airportCityTo = searchForm.value.arrivalCity?.id ? [Number(searchForm.value.arrivalCity.id)] : []
    
    const searchParams = {
      country: Number(searchForm.value.destination.id),
      package_template: Number(searchForm.value.package.id),
      airport_city_from: Number(searchForm.value.departureCity.id),
      airport_city_to: airportCityTo,
      date_from: formatDate(searchForm.value.checkInDate),
      date_to: formatDate(searchForm.value.checkOutDate),
      nights_from: Number(searchForm.value.nights),
      nights_to: Number(searchForm.value.nights2),
      adults: Number(searchForm.value.adults),
      children: searchForm.value.children !== null ? Number(searchForm.value.children) : undefined,
      children_age: searchForm.value.children !== null && searchForm.value.children > 0 ? searchForm.value.childrenAges : undefined,
      selected_hotels: (() => {
        const hotels = getSelectedHotelsForSearch()
        logger.info(`üè® Selected hotels for search: ${hotels.length} hotels`, hotels.slice(0, 5))
        return hotels
      })(),
      meals: selectedFilters.value.meals.length > 0 ? selectedFilters.value.meals.map(mealId => {
        const meal = searchData.meals.value.find(m => m.id === mealId)
        return meal?.name || meal?.label || mealId.toString()
      }) : searchData.meals.value.map(meal => meal.name || meal.label || meal.id.toString()).filter(Boolean),
      options: selectedFilters.value.options.length > 0 ? selectedFilters.value.options.map(optionId => {
        return optionId.toString()
      }) : undefined
    }
    
    logger.info('üîç Search parameters prepared:', {
      country: searchParams.country,
      package_template: searchParams.package_template,
      airport_city_from: searchParams.airport_city_from,
      airport_city_to: searchParams.airport_city_to,
      date_from: searchParams.date_from,
      date_to: searchParams.date_to,
      nights_from: searchParams.nights_from,
      nights_to: searchParams.nights_to,
      adults: searchParams.adults,
      children: searchParams.children,
      selected_hotels: searchParams.selected_hotels,
      meals: searchParams.meals,
      options: searchParams.options
    })

    isLoading.value = true
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    searchResults.value = null
    totalResults.value = 0
    currentPage.value = 1
    loadedPages.value.clear() // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã, per_page > 500)
    const searchParamsWithPagination = {
      ...searchParams,
      page: 1, // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      per_page: serverPageSize // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã (per_page > 500)
    }
    
    logger.debug(`Search params with pagination:`, searchParamsWithPagination)
    logger.debug(`Search params with pagination - page: ${searchParamsWithPagination.page}, per_page: ${searchParamsWithPagination.per_page}`)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    lastSearchParams.value = searchParams
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    allLoadedResults.value = null
    
    // –í—ã–∑—ã–≤–∞–µ–º API –ø–æ–∏—Å–∫–∞
    searchData.performSearch(searchParamsWithPagination)
      .then((result) => {
        isLoading.value = false
        
        logger.debug('Raw search result:', result)
        logger.debug('Result type:', typeof result)
        logger.debug('Result keys:', result ? Object.keys(result) : 'null')
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if (result) {
          logger.debug('Full search result structure:', result)
          logger.debug('Result keys:', Object.keys(result))
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
          let resultsData: Record<string, ObsSearchResult> | null = null
          let totalCount = 0
          
          if (result.results && typeof result.results === 'object') {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { results: {...}, total_results: N }
            resultsData = result.results
            totalCount = result.total_results || 0
            logger.debug('Using standard structure: result.results')
          } else if (typeof result === 'object' && !result.results) {
            // –ü—Ä—è–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
            const excludeKeys = ['search_id', 'total_results', 'page', 'per_page', 'total_pages', 'prev_page', 'next_page', 'message']
            const resultKeys = Object.keys(result).filter(key => !excludeKeys.includes(key))
            
            if (resultKeys.length > 0) {
              resultsData = {}
              resultKeys.forEach(key => {
                if (resultsData) {
                  resultsData[key] = result[key]
                }
              })
              totalCount = resultKeys.length
              logger.debug('Using direct structure: results in root object')
            }
          }
          
          if (resultsData && Object.keys(resultsData).length > 0) {
            searchResults.value = resultsData
            totalResults.value = totalCount
            allLoadedResults.value = resultsData
            loadedPages.value.add(1)
            
            logger.info(`‚úÖ Search completed successfully: total_results = ${totalResults.value}`)
            logger.info(`‚úÖ Results stored: allLoadedResults keys = ${allLoadedResults.value ? Object.keys(allLoadedResults.value).length : 0}`)
            logger.info(`‚úÖ First few result keys = ${allLoadedResults.value ? Object.keys(allLoadedResults.value).slice(0, 5) : []}`)
            logger.info(`‚úÖ searchResults.value = ${searchResults.value ? 'SET' : 'NULL'}`)
            logger.info(`‚úÖ totalResults.value = ${totalResults.value}`)
          } else {
            logger.warn('‚ùå No valid results found in search response:', result)
            logger.warn('‚ùå resultsData =', resultsData)
            logger.warn('‚ùå resultKeys length =', result ? Object.keys(result).length : 'no result')
            searchResults.value = null
            allLoadedResults.value = null
            totalResults.value = 0
          }
        } else {
          logger.warn('Empty search response')
          searchResults.value = null
          allLoadedResults.value = null
          totalResults.value = 0
        }
      })
      .catch((error) => {
        logger.error('Search failed:', error)
        isLoading.value = false
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤'
        
        if (error.message && error.message.includes('Validation failed')) {
          errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã'
        } else if (error.message && error.message.includes('NO_TICKETS')) {
          errorMessage = '–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π'
        } else if (error.message) {
          errorMessage = error.message
        }
        
        showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', errorMessage)
      })
  }

  const handleReset = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º nextTick –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      await nextTick()
      
      searchForm.value = {
        departureCity: null,
        destination: null,
        package: null,
        arrivalCity: null,
        date: null,
        checkInDate: null,
        checkOutDate: null,
        nights: null,
        nights2: null,
        adults: null,
        children: null,
        childrenAges: [],
        priceFrom: null,
        priceTo: null,
        selectedHotels: [],
      }
      selectedFilters.value = {
        regions: [],
        categories: [],
        hotels: [],
        meals: [],
        options: [],
      }
      
      // –û—á–∏—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
      searchResults.value = null
      allLoadedResults.value = null
      totalResults.value = 0
      currentPage.value = 1
      lastSearchParams.value = null
      loadedPages.value.clear()
      isLoadingMore.value = false
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      clearSearchState()
    } catch (error) {
      logger.error('Error in handleReset:', error)
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è nights2
  const updateNights2Min = () => {
    if (searchForm.value.nights && (!searchForm.value.nights2 || searchForm.value.nights2 < searchForm.value.nights)) {
      searchForm.value.nights2 = searchForm.value.nights
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã
  const selectAvailableDate = () => {
    const { availableDates } = useCalendarHints()
    
    if (availableDates.value.length > 0) {
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
      const firstAvailableDate = availableDates.value[0]
      searchForm.value.checkInDate = firstAvailableDate
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞ —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π (–∏–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π)
      const nights = searchForm.value.nights || 7
      const checkOutDate = new Date(firstAvailableDate)
      checkOutDate.setDate(checkOutDate.getDate() + nights)
      searchForm.value.checkOutDate = checkOutDate
      
      logger.info(`Auto-selected available dates: ${firstAvailableDate.toLocaleDateString()} - ${checkOutDate.toLocaleDateString()}`)
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      const nextWeek = new Date()
      nextWeek.setDate(nextWeek.getDate() + 7)
      searchForm.value.checkInDate = nextWeek
      
      const nights = searchForm.value.nights || 7
      const checkOutDate = new Date(nextWeek)
      checkOutDate.setDate(checkOutDate.getDate() + nights)
      searchForm.value.checkOutDate = checkOutDate
      
      logger.info(`No available dates found, using default: ${nextWeek.toLocaleDateString()} - ${checkOutDate.toLocaleDateString()}`)
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const loadMoreData = async () => {
    // –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–∑—É (per_page > 500), 
    // —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    logger.debug('loadMoreData called - no additional loading needed (all results loaded at once)')
    return Promise.resolve()
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const handlePageChange = (page: number) => {
    // Don't change page if it's the same
    if (page === currentPage.value) {
      return
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
    if (page < 1 || page > totalPages.value) {
      logger.warn(`Invalid page number: ${page}, total pages: ${totalPages.value}`)
      return
    }
    
    logger.debug(`handlePageChange: changing from page ${currentPage.value} to page ${page}`)
    currentPage.value = page
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–∞—á–∞–ª—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ—Ç—Å—Ç—É–ø–æ–º —Å–≤–µ—Ä—Ö—É
    setTimeout(() => {
      const resultsSection = document.querySelector('.search-results-section')
      if (resultsSection) {
        const elementTop = resultsSection.getBoundingClientRect().top + window.pageYOffset
        // –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –æ—Ç—Å—Ç—É–ø: –±–æ–ª—å—à–µ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö, –º–µ–Ω—å—à–µ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ
        const isMobile = window.innerWidth <= 768
        const offset = isMobile ? 80 : 100
        const offsetPosition = elementTop - offset
        
        window.scrollTo({
          top: offsetPosition,
          behavior: 'smooth'
        })
      }
    }, 100) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞
  const handleBook = (result: GroupedSearchResult) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    saveSearchState()
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    alert(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞: ${result.hotel.name} –æ—Ç ${result.minPrice} ${result.currency}`)
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
  const saveSearchState = () => {
    try {
      const searchState = {
        searchForm: searchForm.value,
        selectedFilters: selectedFilters.value,
        searchResults: searchResults.value,
        allLoadedResults: allLoadedResults.value,
        totalResults: totalResults.value,
        currentPage: currentPage.value,
        lastSearchParams: lastSearchParams.value,
        loadedPages: Array.from(loadedPages.value),
        timestamp: Date.now()
      }
      
      sessionStorage.setItem('searchState', JSON.stringify(searchState))
      logger.info('üíæ Search state saved to sessionStorage')
    } catch (error) {
      logger.warn('Failed to save search state:', error)
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–∏—Å–∫–∞
  const restoreSearchState = () => {
    try {
      const savedState = sessionStorage.getItem('searchState')
      if (!savedState) {
        logger.info('No saved search state found')
        return false
      }

      const searchState = JSON.parse(savedState)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞)
      const maxAge = 60 * 60 * 1000 // 1 —á–∞—Å
      if (Date.now() - searchState.timestamp > maxAge) {
        logger.info('Saved search state is too old, ignoring')
        sessionStorage.removeItem('searchState')
        return false
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      searchForm.value = searchState.searchForm || searchForm.value
      selectedFilters.value = searchState.selectedFilters || selectedFilters.value
      searchResults.value = searchState.searchResults || null
      allLoadedResults.value = searchState.allLoadedResults || null
      totalResults.value = searchState.totalResults || 0
      currentPage.value = searchState.currentPage || 1
      lastSearchParams.value = searchState.lastSearchParams || null
      loadedPages.value = new Set(searchState.loadedPages || [])
      
      logger.info('üîÑ Search state restored from sessionStorage')
      return true
    } catch (error) {
      logger.warn('Failed to restore search state:', error)
      sessionStorage.removeItem('searchState')
      return false
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const clearSearchState = () => {
    try {
      sessionStorage.removeItem('searchState')
      logger.info('üóëÔ∏è Search state cleared from sessionStorage')
    } catch (error) {
      logger.warn('Failed to clear search state:', error)
    }
  }

  // –ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const initializeData = async () => {
    try {
      logger.info('üîÑ Initializing search data...')
      await searchData.initializeData()
      logger.info('‚úÖ Search data initialized')
      logger.info(`üèôÔ∏è Departure cities loaded: ${searchData.departureCitiesOptions.value.length}`)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
      restoreSearchState()
    } catch (err) {
      logger.error('‚ùå Failed to initialize search data:', err)
    }
  }

  return {
    // State
    searchForm,
    selectedFilters,
    isLoading,
    searchResults,
    totalResults,
    currentPage,
    totalPages,
    formattedResults,
    activeSelector,
    filteredNights2Options,
    dynamicNightsOptions,
    paginatedResults,
    isLoadingMore,
    needsMoreData,
    
    // Search data
    searchData,
    
    // Calendar hints
    calendarHints,
    
    // Methods
    handleSearch,
    handleReset,
    updateNights2Min,
    selectAvailableDate,
    handlePageChange,
    handleBook,
    initializeData,
    loadMoreData,
    groupResultsByHotel,
    
    // State management
    saveSearchState,
    restoreSearchState,
    clearSearchState,
  }
}
