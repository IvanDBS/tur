version: '3.8'

services:
  # PostgreSQL Primary Database
  postgres:
    image: postgres:17-alpine
    container_name: tur_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-backend_production}
      POSTGRES_USER: ${POSTGRES_USER:-backend}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      # Enable replication
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/primary/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/primary/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-backend}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
      -c wal_level=replica
      -c max_wal_senders=3
      -c max_replication_slots=3
      -c hot_standby=on

  # PostgreSQL Read Replica
  postgres_replica:
    image: postgres:17-alpine
    container_name: tur_postgres_replica_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-backend_production}
      POSTGRES_USER: ${POSTGRES_USER:-backend}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGUSER: ${POSTGRES_USER:-backend}
      # Replication settings
      POSTGRES_MASTER_HOST: postgres
      POSTGRES_MASTER_PORT: 5432
      POSTGRES_REPLICATION_USER: ${POSTGRES_REPLICATION_USER:-replicator}
      POSTGRES_REPLICATION_PASSWORD: ${POSTGRES_REPLICATION_PASSWORD}
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
      - ./postgres/replica/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/replica/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-backend}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: >
      bash -c "
      # Wait for primary to be ready
      until pg_isready -h postgres -p 5432 -U ${POSTGRES_USER:-backend}; do
        echo 'Waiting for primary database...'
        sleep 2
      done
      
      # Initialize replica if not already done
      if [ ! -f /var/lib/postgresql/data/PG_VERSION ]; then
        echo 'Initializing replica...'
        pg_basebackup -h postgres -D /var/lib/postgresql/data -U ${POSTGRES_REPLICATION_USER:-replicator} -v -P -W
      fi
      
      # Start replica
      postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
      "

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tur_redis_prod
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Rails Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: tur_backend_prod
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-backend}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-backend_production}
      - REDIS_URL=redis://redis:6379/0
      - OBS_API_URL=${OBS_API_URL}
      - OBS_API_EMAIL=${OBS_API_EMAIL}
      - OBS_API_PASSWORD=${OBS_API_PASSWORD}
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
      - ASSET_HOST=${ASSET_HOST}
      - PRODUCTION_HOST=${PRODUCTION_HOST}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/up"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Sidekiq Background Jobs
  sidekiq:
    build:
      context: ./backend
      dockerfile: Dockerfile.production
    container_name: tur_sidekiq_prod
    environment:
      - RAILS_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-backend}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-backend_production}
      - REDIS_URL=redis://redis:6379/0
      - OBS_API_URL=${OBS_API_URL}
      - OBS_API_EMAIL=${OBS_API_EMAIL}
      - OBS_API_PASSWORD=${OBS_API_PASSWORD}
      - RAILS_MASTER_KEY=${RAILS_MASTER_KEY}
      - SECRET_KEY_BASE=${SECRET_KEY_BASE}
    command: bundle exec sidekiq
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Vue.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
    container_name: tur_frontend_prod
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=${VITE_API_URL}
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional, for load balancing)
  nginx:
    image: nginx:alpine
    container_name: tur_nginx_prod
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  postgres_replica_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
