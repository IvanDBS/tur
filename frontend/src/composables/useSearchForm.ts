import { computed, watch, nextTick, ref } from 'vue'
import { useSearchData } from './useSearchData'
import { useCalendarHints } from './useCalendarHints'
import { useNotifications } from './useNotifications'
import { useSearchValidation } from './useSearchValidation'
import { useSearchPagination } from './useSearchPagination'
import { useSearchFilters } from './useSearchFilters'
import { useSearchState } from './useSearchState'
import { logger } from '../utils/logger'
import { getAirportIdByPackageName } from '../constants/airports'
import { debounce } from '../utils/debounce'
import type { GroupedSearchResult } from '../types/search'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –æ—Ç OBS API
interface ObsSearchResult {
  unique_key: string
  rid: string
  hotel_results_counter: number
  package_template: number
  operator: number
  additional_services: unknown[]
  dates: {
    check_in: string
    check_out: string
  }
  nights: {
    total: number
    on_the_way: number
  }
  accommodation: {
    hotel: {
      id: number
      name: string
      is_exclusive: boolean
      category: string
      city: string
      in_stop: boolean
    }
    room: {
      id: number
      name: string
    }
    placement: {
      id: number
      name: string
    }
    meal: {
      id: number
      name: string
      full_name: string
    }
  }
  tickets: {
    from: {
      id: number
      name: string
      airline: {
        iata_code: string
        color: string
        name: string
        airline: string
      }
      departure: {
        date: string
        time: string
      }
      arrival: {
        date: string
        time: string
      }
      airports: {
        from: {
          name: string
          prefix: string
        }
        to: {
          name: string
          prefix: string
        }
      }
      tickets: number | null
    }
    to: {
      id: number
      name: string
      airline: {
        iata_code: string
        color: string
        name: string
        airline: string
      }
      departure: {
        date: string
        time: string
      }
      arrival: {
        date: string
        time: string
      }
      airports: {
        from: {
          name: string
          prefix: string
        }
        to: {
          name: string
          prefix: string
        }
      }
      tickets: number | null
    }
    on_request: 'y' | 'n'
    has_tickets: boolean
  }
  price: {
    amount: number
    netto: number
    commission: number
    type: string
    currency: string
    currency_id: number
  }
  transfers: {
    to: number
    from: number
  }
  never_land_entrance: unknown[]
  gala_dinner: unknown[]
  aquapark_services: unknown[]
  tourists: {
    adults: number
    children_ages: number[]
  }
}

export const useSearchForm = () => {
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ composables
  const searchData = useSearchData()
  const calendarHints = useCalendarHints()
  const { showError } = useNotifications()
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ composables
  const { validateSearchForm, validateDates } = useSearchValidation()
  const {
    currentPage,
    serverPageSize,
    lastSearchParams,
    allLoadedResults,
    loadedPages,
    isLoadingMore,
    totalPages,
    paginatedResults,
    needsMoreData,
    handlePageChange,
    loadMoreData,
    groupResultsByHotel,
    resetPagination
  } = useSearchPagination()
  const { 
    selectedFilters, 
    getSelectedHotelsForSearch, 
    resetFilters, 
    toggleAllHotels, 
    toggleAllCategories, 
    toggleAllRegions,
    toggleRegion,
    toggleCategory,
    toggleHotel,
    toggleMeal,
    toggleOption,
    toggleAllMeals,
    toggleAllOptions,
    allRegionsSelected,
    allCategoriesSelected,
    allHotelsSelected,
    allMealsSelected,
    allOptionsSelected
  } = useSearchFilters()
  const {
    searchForm,
    isLoading,
    searchResults,
    totalResults,
    saveSearchState,
    restoreSearchState,
    clearSearchState,
    resetSearchForm
  } = useSearchState()

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è debounce
  const isSearchPending = ref(false)
  const searchRequestId = ref(0)

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–µ–ª–∫–∏
  const activeSelector = computed((): string | null => {
    if (!searchForm.value.departureCity) return 'departureCity'
    if (!searchForm.value.destination) return 'destination'
    if (!searchForm.value.package) return 'package'
    if (!searchForm.value.arrivalCity) return 'arrivalCity'
    if (!searchForm.value.checkInDate) return 'checkInDate'
    if (!searchForm.value.checkOutDate) return 'checkOutDate'
    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–µ "–Ω–æ—á–µ–π –æ—Ç"
    if (searchForm.value.checkInDate && searchForm.value.nights === null) return 'nights'
    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–æ—á–µ–π –æ—Ç –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–µ "–≤–∑—Ä–æ—Å–ª—ã—Ö"
    if (searchForm.value.nights !== null && searchForm.value.adults === null) return 'adults'
    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∑—Ä–æ—Å–ª—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ–ª–µ "–¥–µ—Ç–µ–π"
    if (searchForm.value.adults !== null && searchForm.value.children === null) return 'children'
    // –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ—Ç–µ–π (–≤–∫–ª—é—á–∞—è 0 - "–ë–µ–∑ –¥–µ—Ç–µ–π") –≤—Å–µ –ø–æ–ª—è –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç—Å—è, —Å—Ç—Ä–µ–ª–æ—á–∫–∞ –∏—Å—á–µ–∑–∞–µ—Ç
    return null // –í—Å–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
  })

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞
  watch(() => searchForm.value.checkInDate, (newDate) => {
    if (newDate) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
      searchForm.value.nights = null
      searchForm.value.nights2 = null
      searchForm.value.adults = null
      searchForm.value.children = null
      searchForm.value.childrenAges = []
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º "–ü–µ—Ä–∏–æ–¥ –∑–∞–µ–∑–¥–∞ –¥–æ" —Ä–∞–≤–Ω—ã–º "–ü–µ—Ä–∏–æ–¥ –∑–∞–µ–∑–¥–∞ –æ—Ç" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      // –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞—Å–µ–ª–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
      searchForm.value.checkOutDate = new Date(newDate)
      logger.info('üîÑ Set checkOutDate (max check-in date) equal to checkInDate (min check-in date):', newDate)
    }
  })

  // –£–±—Ä–∞–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞—Å—á–µ—Ç checkOutDate, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ –¥–∞—Ç–∞ –≤—ã–µ–∑–¥–∞,
  // –∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –∑–∞—Å–µ–ª–µ–Ω–∏—è –≤ –æ—Ç–µ–ª–µ
  // checkOutDate —Ç–µ–ø–µ—Ä—å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º checkInDate –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω—é—é –¥–∞—Ç—É

  // –§–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –Ω–æ—á–µ–π
  const filteredNights2Options = computed(() => {
    if (!searchForm.value.nights) {
      return []
    }

    return searchData.nightsOptions.value.filter(
      (option: { value: number; label: string }) => option.value >= (searchForm.value.nights || 0)
    )
  })
  
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ–ø—Ü–∏–∏ –Ω–æ—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ calendar hints
  const dynamicNightsOptions = computed(() => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–æ—á–∏ –∏–∑ calendar hints, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
    if (calendarHints.availableNights.value.length > 0) {
      return calendarHints.availableNightsOptions.value
    }
    
    // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏
    return searchData.nightsOptions.value
  })

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const formattedResults = computed(() => {
    if (!searchResults.value || typeof searchResults.value !== 'object') {
      return []
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const formatted = paginatedResults.value.map((result: GroupedSearchResult) => ({
      unique_key: `${result.hotel.id}-${result.roomOptions[0]?.room.id || 0}-${result.roomOptions[0]?.meal.id || 0}`,
      rid: `${result.hotel.id}-${result.roomOptions[0]?.room.id || 0}-${result.roomOptions[0]?.meal.id || 0}`,
      accommodation: {
        hotel: {
          name: result.hotel?.name || '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è',
          category: result.hotel?.category || '',
          city: result.hotel?.city || ''
        },
        room: {
          name: result.roomOptions[0]?.room?.name || ''
        },
        meal: {
          full_name: result.roomOptions[0]?.meal?.full_name || result.roomOptions[0]?.meal?.name || ''
        }
      },
      dates: {
        check_in: result.dates?.check_in || '',
        check_out: result.dates?.check_out || ''
      },
      nights: {
        total: result.nights?.total || 0
      },
      price: {
        amount: result.minPrice || 0,
        currency: result.currency || 'EUR',
        type: result.roomOptions[0]?.price?.type || ''
      }
    }))
    
    return formatted
  })

  // –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π watcher –¥–ª—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Å—Ç—Ä–∞–Ω—ã
  watch(
    () => [searchForm.value.departureCity, searchForm.value.destination],
    async ([newCity, newCountry], [oldCity, oldCountry]) => {
      try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (newCity && newCity.id && newCity.id !== oldCity?.id) {
          searchForm.value.destination = null
          searchForm.value.package = null
          await searchData.loadCountries(newCity.id)
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
        if (newCountry && newCountry.id && newCountry.id !== oldCountry?.id && searchForm.value.departureCity?.id) {
          searchForm.value.package = null
          searchForm.value.arrivalCity = null
          await searchData.loadPackageTemplates(newCountry.id, searchForm.value.departureCity.id)
        }
      } catch (err) {
        logger.error('Search form cascade watch error:', err)
      }
    },
    { deep: true }
  )

  // –°–ª–µ–¥–∏–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –ø–∞–∫–µ—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  watch(() => searchForm.value.package, async (newPackage) => {
    try {
      if (newPackage && newPackage.id) {
        // –ï—Å–ª–∏ —É –ø–∞–∫–µ—Ç–∞ –µ—Å—Ç—å –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞
        if (newPackage.airports && newPackage.airports.length > 0) {
          const airport = newPackage.airports[0]
          
          // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞
          const arrivalCity = {
            id: airport.id,
            name: airport.label || airport.name || `Airport ${airport.id}`
          }
          
          // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          searchForm.value.arrivalCity = { ...arrivalCity }
          
          // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º Multiselect
          await nextTick()
        } else {
          // –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–∫–µ—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, 
          // –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø–∞–∫–µ—Ç–∞
          const packageName = newPackage.label || newPackage.name || ''
          const airportId = getAirportIdByPackageName(packageName)
          
          if (airportId) {
            const arrivalCity = {
              id: airportId,
              name: packageName.toUpperCase()
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            searchForm.value.arrivalCity = { ...arrivalCity }
            
            // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è DOM
            await nextTick()
          }
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π
        await Promise.all([
          searchData.loadHotelCategories(newPackage.id),
          searchData.loadLocations(newPackage.id),
          searchData.loadHotels(newPackage.id),
          searchData.loadMeals(newPackage.id)
        ])
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º calendar hints –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç –∏ –Ω–æ—á–µ–π
        if (searchForm.value.departureCity?.id && searchForm.value.arrivalCity?.id) {
          try {
            await calendarHints.loadCalendarHints({
              city_from: searchForm.value.departureCity.id,
              city_to: searchForm.value.arrivalCity.id.toString()
            })
            logger.info('Calendar hints loaded successfully')
          } catch (err) {
            logger.warn('Failed to load calendar hints:', err)
          }
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–µ–ª–∏
        if (searchData.regions.value.length > 0) {
          selectedFilters.value.regions = [1, ...searchData.regions.value.map(r => r.id)]
        }
        
        if (searchData.categories.value.length > 0) {
          selectedFilters.value.categories = [1, ...searchData.categories.value.map(c => c.id)]
        }
        
        if (searchData.hotels.value.length > 0) {
          selectedFilters.value.hotels = [1, ...searchData.hotels.value.map(h => h.id)]
        }
        
        if (searchData.meals.value.length > 0) {
          selectedFilters.value.meals = [1, ...searchData.meals.value.map(m => m.id)]
        }
      } else {
        // –û—á–∏—â–∞–µ–º –≥–æ—Ä–æ–¥ –ø—Ä–∏–ª–µ—Ç–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ø–∞–∫–µ—Ç–∞
        searchForm.value.arrivalCity = null
      }
    } catch (err) {
      logger.error('Package watch error:', err)
    }
  })

  // Watcher –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
  watch(() => searchForm.value.children, (newChildren, oldChildren) => {
    if (newChildren !== oldChildren) {
      if (newChildren === null || newChildren === 0) {
        searchForm.value.childrenAges = []
      } else {
        const currentAges = [...searchForm.value.childrenAges]
        searchForm.value.childrenAges = Array(newChildren)
          .fill(0)
          .map((_, index) => {
            return index < currentAges.length ? currentAges[index] : 0
          })
      }
    }
  }, { immediate: true })

  // Watcher –¥–ª—è nights
  watch(() => searchForm.value.nights, (newNights, oldNights) => {
    if (newNights !== oldNights && newNights && (!searchForm.value.nights2 || searchForm.value.nights2 < newNights)) {
      searchForm.value.nights2 = newNights
    }
  }, { immediate: true })





  // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ (–±–µ–∑ debounce)
  const performSearchInternal = () => {
    const currentRequestId = ++searchRequestId.value
    
    logger.info('üîç Starting search with form data:', {
      departureCity: searchForm.value.departureCity?.id,
      destination: searchForm.value.destination?.id,
      package: searchForm.value.package?.id,
      checkInDate: searchForm.value.checkInDate,
      checkOutDate: searchForm.value.checkOutDate,
      nights: searchForm.value.nights,
      adults: searchForm.value.adults,
      children: searchForm.value.children
    })
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ –≤ —Ñ–æ—Ä–º—É –ø–æ–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
    searchForm.value.selectedHotels = getSelectedHotelsForSearch(searchData)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!validateSearchForm(searchForm.value, selectedFilters.value)) {
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞—Ç
    if (!validateDates(searchForm.value)) {
      return
    }
    
    logger.info('‚úÖ Validation passed, proceeding with search...')

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY –¥–ª—è API (–∫–∞–∫ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è)
    const formatDate = (date: Date | null) => {
      if (!date) return ''
      const day = date.getDate().toString().padStart(2, '0')
      const month = (date.getMonth() + 1).toString().padStart(2, '0')
      const year = date.getFullYear()
      return `${day}.${month}.${year}`
    }
    
    logger.info('üìÖ Formatted dates for API:', {
      checkIn: formatDate(searchForm.value.checkInDate),
      maxCheckIn: formatDate(searchForm.value.checkOutDate)
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API
    const airportCityTo = searchForm.value.arrivalCity?.id ? [Number(searchForm.value.arrivalCity.id)] : []
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑–∞–µ–∑–¥–∞
    const dateFrom = searchForm.value.checkInDate ? formatDate(searchForm.value.checkInDate) : ''
    const dateTo = searchForm.value.checkOutDate ? formatDate(searchForm.value.checkOutDate) : dateFrom
    
    const searchParams = {
      country: Number(searchForm.value.destination?.id),
      package_template: Number(searchForm.value.package?.id),
      airport_city_from: Number(searchForm.value.departureCity?.id),
      airport_city_to: airportCityTo,
      date_from: dateFrom,
      date_to: dateTo, // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑–∞–µ–∑–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
      nights_from: Number(searchForm.value.nights),
      nights_to: Number(searchForm.value.nights2),
      adults: Number(searchForm.value.adults),
      children: searchForm.value.children !== null ? Number(searchForm.value.children) : undefined,
      children_age: searchForm.value.children !== null && searchForm.value.children > 0 ? searchForm.value.childrenAges : undefined,
      selected_hotels: (() => {
        const hotels = getSelectedHotelsForSearch(searchData)
        logger.info(`üè® Selected hotels for search: ${hotels.length} hotels`, hotels.slice(0, 5))
        return hotels
      })(),
      meals: selectedFilters.value.meals.length > 0 ? [...new Set(selectedFilters.value.meals)].map(mealId => {
        const meal = searchData.meals.value.find(m => m.id === mealId)
        return meal?.name || meal?.label || mealId.toString()
      }) : searchData.meals.value.map(meal => meal.name || meal.label || meal.id.toString()).filter(Boolean).filter((meal, index, arr) => arr.indexOf(meal) === index), // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      options: selectedFilters.value.options.length > 0 ? selectedFilters.value.options.map(optionId => {
        return optionId.toString()
      }) : undefined
    }
    
    logger.info('üîç Search parameters prepared:', {
      country: searchParams.country,
      package_template: searchParams.package_template,
      airport_city_from: searchParams.airport_city_from,
      airport_city_to: searchParams.airport_city_to,
      date_from: searchParams.date_from,
      date_to: searchParams.date_to,
      nights_from: searchParams.nights_from,
      nights_to: searchParams.nights_to,
      adults: searchParams.adults,
      children: searchParams.children,
      selected_hotels: searchParams.selected_hotels,
      meals: searchParams.meals,
      options: searchParams.options
    })

    isLoading.value = true
    isSearchPending.value = false // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    searchResults.value = null
    totalResults.value = 0
    currentPage.value = 1
    loadedPages.value.clear() // –û—á–∏—â–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã, per_page > 500)
    const searchParamsWithPagination = {
      ...searchParams,
      page: 1, // –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      per_page: serverPageSize // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ç—É—Ä—ã (per_page > 500)
    }
    
    logger.debug(`Search params with pagination:`, searchParamsWithPagination)
    logger.debug(`Search params with pagination - page: ${searchParamsWithPagination.page}, per_page: ${searchParamsWithPagination.per_page}`)
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    lastSearchParams.value = searchParams
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    allLoadedResults.value = null
    
    // –í—ã–∑—ã–≤–∞–µ–º API –ø–æ–∏—Å–∫–∞
    searchData.performSearch(searchParamsWithPagination)
      .then((result) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if (currentRequestId !== searchRequestId.value) {
          logger.info('üö´ Search request outdated, ignoring result')
          return
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º nextTick –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        nextTick(() => {
          isLoading.value = false
        })
        
        logger.debug('Raw search result:', result)
        logger.debug('Result type:', typeof result)
        logger.debug('Result keys:', result ? Object.keys(result) : 'null')
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        if (result) {
          logger.debug('Full search result structure:', result)
          logger.debug('Result keys:', Object.keys(result))
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
          let resultsData: Record<string, ObsSearchResult> | null = null
          let totalCount = 0
          
          if (result.results && typeof result.results === 'object') {
            // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { results: {...}, total_results: N }
            resultsData = result.results as Record<string, ObsSearchResult>
            totalCount = (result.total_results as number) || 0
            logger.debug('Using standard structure: result.results')
          } else if (typeof result === 'object' && !result.results) {
            // –ü—Ä—è–º–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ—Ä–Ω–µ –æ–±—ä–µ–∫—Ç–∞
            // –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –ø–æ–ª—è
            const excludeKeys = ['search_id', 'total_results', 'page', 'per_page', 'total_pages', 'prev_page', 'next_page', 'message']
            const resultKeys = Object.keys(result).filter(key => !excludeKeys.includes(key))
            
            if (resultKeys.length > 0) {
              resultsData = {} as Record<string, ObsSearchResult>
              resultKeys.forEach(key => {
                if (resultsData && result[key]) {
                  resultsData[key] = result[key] as ObsSearchResult
                }
              })
              totalCount = resultKeys.length
              logger.debug('Using direct structure: results in root object')
            }
          }
          
          if (resultsData && Object.keys(resultsData).length > 0) {
            nextTick(() => {
              searchResults.value = resultsData
              totalResults.value = totalCount
              allLoadedResults.value = resultsData
              loadedPages.value.add(1)
            })
            
            logger.info(`‚úÖ Search completed successfully: total_results = ${totalCount}`)
            logger.info(`‚úÖ Results stored: allLoadedResults keys = ${resultsData ? Object.keys(resultsData).length : 0}`)
            logger.info(`‚úÖ First few result keys = ${resultsData ? Object.keys(resultsData).slice(0, 5) : []}`)
            logger.info(`‚úÖ searchResults.value = ${resultsData ? 'SET' : 'NULL'}`)
            logger.info(`‚úÖ totalResults.value = ${totalCount}`)
          } else {
            logger.warn('‚ùå No valid results found in search response:', result)
            logger.warn('‚ùå resultsData =', resultsData)
            logger.warn('‚ùå resultKeys length =', result ? Object.keys(result).length : 'no result')
            nextTick(() => {
              searchResults.value = null
              allLoadedResults.value = null
              totalResults.value = 0
            })
          }
        } else {
          logger.warn('Empty search response')
          nextTick(() => {
            searchResults.value = null
            allLoadedResults.value = null
            totalResults.value = 0
          })
        }
      })
      .catch((error) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if (currentRequestId !== searchRequestId.value) {
          logger.info('üö´ Search request outdated, ignoring error')
          return
        }
        
        logger.error('Search failed:', error)
        nextTick(() => {
          isLoading.value = false
        })
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let errorMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—É—Ä–æ–≤'
        
        if (error.message && error.message.includes('Validation failed')) {
          errorMessage = '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã'
        } else if (error.message && error.message.includes('NO_TICKETS')) {
          errorMessage = '–ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —Ç—É—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ—á–µ–π'
        } else if (error.message) {
          errorMessage = error.message
        }
        
        showError('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞', errorMessage)
      })
  }

  // –°–æ–∑–¥–∞–µ–º debounced –≤–µ—Ä—Å–∏—é –ø–æ–∏—Å–∫–∞
  const debouncedSearch = debounce(performSearchInternal, 800)

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å debounce
  const handleSearch = () => {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–∂–∏–¥–∞–Ω–∏—è
    isSearchPending.value = true
    
    // –í—ã–∑—ã–≤–∞–µ–º debounced –ø–æ–∏—Å–∫
    debouncedSearch()
  }

  const handleReset = async () => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–µ composables –¥–ª—è —Å–±—Ä–æ—Å–∞
      await resetSearchForm()
      resetFilters()
      resetPagination()
    } catch (error) {
      logger.error('Error in handleReset:', error)
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è nights2
  const updateNights2Min = () => {
    if (searchForm.value.nights && (!searchForm.value.nights2 || searchForm.value.nights2 < searchForm.value.nights)) {
      searchForm.value.nights2 = searchForm.value.nights
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–∞—Ç—ã
  const selectAvailableDate = () => {
    const { availableDates } = calendarHints
    
    if (availableDates.value.length > 0) {
      // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É
      const firstAvailableDate = availableDates.value[0]
      searchForm.value.checkInDate = firstAvailableDate
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è
      searchForm.value.checkOutDate = new Date(firstAvailableDate)
      
      logger.info(`Auto-selected available dates: ${firstAvailableDate.toLocaleDateString()} - ${searchForm.value.checkOutDate?.toLocaleDateString()}`)
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
      const nextWeek = new Date()
      nextWeek.setDate(nextWeek.getDate() + 7)
      searchForm.value.checkInDate = nextWeek
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∑–∞—Å–µ–ª–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–∞—Ç–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è
      searchForm.value.checkOutDate = new Date(nextWeek)
      
      logger.info(`No available dates found, using default: ${nextWeek.toLocaleDateString()} - ${searchForm.value.checkOutDate?.toLocaleDateString()}`)
    }
  }


  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–∞
  const handleBook = (result: GroupedSearchResult) => {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    saveSearchState({
      searchForm: searchForm.value,
      selectedFilters: selectedFilters.value,
      searchResults: searchResults.value,
      allLoadedResults: allLoadedResults.value,
      totalResults: totalResults.value,
      currentPage: currentPage.value,
      lastSearchParams: lastSearchParams.value,
      loadedPages: Array.from(loadedPages.value)
    })
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    alert(`–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–∞: ${result.hotel.name} –æ—Ç ${result.minPrice} ${result.currency}`)
  }


  // –ú–µ—Ç–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const initializeData = async () => {
    try {
      logger.info('üîÑ Initializing search data...')
      await searchData.initializeData()
      logger.info('‚úÖ Search data initialized')
      logger.info(`üèôÔ∏è Departure cities loaded: ${searchData.departureCitiesOptions.value.length}`)
      
      // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞
      const restoredState = restoreSearchState()
      if (restoredState) {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        searchForm.value = restoredState.searchForm || searchForm.value
        selectedFilters.value = restoredState.selectedFilters || selectedFilters.value
        searchResults.value = restoredState.searchResults || null
        allLoadedResults.value = restoredState.allLoadedResults || null
        totalResults.value = restoredState.totalResults || 0
        currentPage.value = restoredState.currentPage || 1
        lastSearchParams.value = restoredState.lastSearchParams || null
        loadedPages.value = new Set(restoredState.loadedPages || [])
      }
    } catch (err) {
      logger.error('‚ùå Failed to initialize search data:', err)
    }
  }

  return {
    // State
    searchForm,
    selectedFilters,
    isLoading,
    isSearchPending,
    searchResults,
    totalResults,
    currentPage,
    totalPages,
    formattedResults,
    activeSelector,
    filteredNights2Options,
    dynamicNightsOptions,
    paginatedResults,
    isLoadingMore,
    needsMoreData,
    
    // Search data
    searchData,
    
    // Calendar hints
    calendarHints,
    
    // Methods
    handleSearch,
    handleReset,
    updateNights2Min,
    selectAvailableDate,
    handlePageChange,
    handleBook,
    initializeData,
    loadMoreData,
    groupResultsByHotel,
    
    // State management
    saveSearchState,
    restoreSearchState,
    clearSearchState,
    
    // Filter functions
    toggleAllHotels,
    toggleAllCategories,
    toggleAllRegions,
    toggleRegion,
    toggleCategory,
    toggleHotel,
    toggleMeal,
    toggleOption,
    toggleAllMeals,
    toggleAllOptions,
    
    // Filter computed properties
    allRegionsSelected,
    allCategoriesSelected,
    allHotelsSelected,
    allMealsSelected,
    allOptionsSelected,
  }
}
